// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
type CertificateSigningRequestCondition struct {
	// LastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" yaml:"lastTransitionTime,omitempty"`

	// LastUpdateTime is the time of the last update to this condition
	LastUpdateTime *string `json:"lastUpdateTime,omitempty" yaml:"lastUpdateTime,omitempty"`

	// Message contains a human readable message with details about the request state
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// Reason indicates a brief reason for the request state
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty"`

	// Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown".
	Status string `json:"status" yaml:"status"`

	// Type of the condition. Known conditions are "Approved", "Denied", and "Failed".
	// An "Approved" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.
	// A "Denied" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.
	// A "Failed" condition is added via the /status subresource, indicating the signer failed to issue the certificate.
	// Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.
	// Only one condition of a given type is allowed.
	Type string `json:"type" yaml:"type"`
}

func NewCertificateSigningRequestCondition() *CertificateSigningRequestCondition {
	return &CertificateSigningRequestCondition{}
}

func NewCertificateSigningRequestConditionWithSpec(spec *CertificateSigningRequestCondition) *CertificateSigningRequestCondition {
	
	return spec
}

func RegisterCertificateSigningRequestCondition(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[CertificateSigningRequestCondition]()).JsNamespace("k8s.certificates.v1").Fields(
		js.Field("LastTransitionTime"),
		js.Field("LastUpdateTime"),
		js.Field("Message"),
		js.Field("Reason"),
		js.Field("Status"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewCertificateSigningRequestCondition)),
		js.Constructor(reflect.ValueOf(NewCertificateSigningRequestConditionWithSpec)),
	)
}