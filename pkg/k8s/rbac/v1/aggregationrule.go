// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
type AggregationRule struct {
	// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
	ClusterRoleSelectors []*apimachinerymetav1.LabelSelector `json:"clusterRoleSelectors,omitempty" yaml:"clusterRoleSelectors,omitempty"`
}

func NewAggregationRule() *AggregationRule {
	return &AggregationRule{}
}

func NewAggregationRuleWithSpec(spec *AggregationRule) *AggregationRule {
	
	return spec
}

func RegisterAggregationRule(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[AggregationRule]()).JsNamespace("k8s.rbac.v1").Fields(
		js.Field("ClusterRoleSelectors"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewAggregationRule)),
		js.Constructor(reflect.ValueOf(NewAggregationRuleWithSpec)),
	)
}