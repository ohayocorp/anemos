// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
type RoleBinding struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty"`

	// Standard object's metadata.
	Metadata *apimachinerymetav1.ObjectMeta `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.
	RoleRef *RoleRef `json:"roleRef" yaml:"roleRef"`

	// Subjects holds references to the objects the role applies to.
	Subjects []*Subject `json:"subjects,omitempty" yaml:"subjects,omitempty"`
}

func NewRoleBinding() *RoleBinding {
	return &RoleBinding{}
}

func NewRoleBindingWithSpec(spec *RoleBinding) *RoleBinding {
	version := "v1"
	kind := "RoleBinding"
	
	spec.ApiVersion = &version
	spec.Kind = &kind
	return spec
}

func RegisterRoleBinding(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[RoleBinding]()).JsNamespace("k8s.rbac.v1").Fields(
		js.Field("ApiVersion"),
		js.Field("Kind"),
		js.Field("Metadata"),
		js.Field("RoleRef"),
		js.Field("Subjects"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewRoleBinding)),
		js.Constructor(reflect.ValueOf(NewRoleBindingWithSpec)),
	)
}