// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type SubjectRulesReviewStatus struct {
	// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
	EvaluationError *string `json:"evaluationError,omitempty" yaml:"evaluationError,omitempty"`

	// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
	Incomplete bool `json:"incomplete" yaml:"incomplete"`

	// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	NonResourceRules []*NonResourceRule `json:"nonResourceRules" yaml:"nonResourceRules"`

	// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	ResourceRules []*ResourceRule `json:"resourceRules" yaml:"resourceRules"`
}

func NewSubjectRulesReviewStatus() *SubjectRulesReviewStatus {
	return &SubjectRulesReviewStatus{}
}

func NewSubjectRulesReviewStatusWithSpec(spec *SubjectRulesReviewStatus) *SubjectRulesReviewStatus {
	
	return spec
}

func RegisterSubjectRulesReviewStatus(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[SubjectRulesReviewStatus]()).JsNamespace("k8s.authorization.v1").Fields(
		js.Field("EvaluationError"),
		js.Field("Incomplete"),
		js.Field("NonResourceRules"),
		js.Field("ResourceRules"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewSubjectRulesReviewStatus)),
		js.Constructor(reflect.ValueOf(NewSubjectRulesReviewStatusWithSpec)),
	)
}