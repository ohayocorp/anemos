// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SubjectAccessReviewSpec struct {
	// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
	Extra *any `json:"extra,omitempty" yaml:"extra,omitempty"`

	// Groups is the groups you're testing for.
	Groups *[]string `json:"groups,omitempty" yaml:"groups,omitempty"`

	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes *NonResourceAttributes `json:"nonResourceAttributes,omitempty" yaml:"nonResourceAttributes,omitempty"`

	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes *ResourceAttributes `json:"resourceAttributes,omitempty" yaml:"resourceAttributes,omitempty"`

	// UID information about the requesting user.
	Uid *string `json:"uid,omitempty" yaml:"uid,omitempty"`

	// User is the user you're testing for. If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
	User *string `json:"user,omitempty" yaml:"user,omitempty"`
}

func NewSubjectAccessReviewSpec() *SubjectAccessReviewSpec {
	return &SubjectAccessReviewSpec{}
}

func NewSubjectAccessReviewSpecWithSpec(spec *SubjectAccessReviewSpec) *SubjectAccessReviewSpec {
	
	return spec
}

func RegisterSubjectAccessReviewSpec(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[SubjectAccessReviewSpec]()).JsNamespace("k8s.authorization.v1").Fields(
		js.Field("Extra"),
		js.Field("Groups"),
		js.Field("NonResourceAttributes"),
		js.Field("ResourceAttributes"),
		js.Field("Uid"),
		js.Field("User"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewSubjectAccessReviewSpec)),
		js.Constructor(reflect.ValueOf(NewSubjectAccessReviewSpecWithSpec)),
	)
}