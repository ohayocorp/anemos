// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// DaemonSetStatus represents the current status of a daemon set.
type DaemonSetStatus struct {
	// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int `json:"collisionCount,omitempty" yaml:"collisionCount,omitempty"`

	// Represents the latest available observations of a DaemonSet's current state.
	Conditions []*DaemonSetCondition `json:"conditions,omitempty" yaml:"conditions,omitempty"`

	// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	CurrentNumberScheduled int `json:"currentNumberScheduled" yaml:"currentNumberScheduled"`

	// The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	DesiredNumberScheduled int `json:"desiredNumberScheduled" yaml:"desiredNumberScheduled"`

	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberAvailable *int `json:"numberAvailable,omitempty" yaml:"numberAvailable,omitempty"`

	// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	NumberMisscheduled int `json:"numberMisscheduled" yaml:"numberMisscheduled"`

	// NumberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.
	NumberReady int `json:"numberReady" yaml:"numberReady"`

	// The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberUnavailable *int `json:"numberUnavailable,omitempty" yaml:"numberUnavailable,omitempty"`

	// The most recent generation observed by the daemon set controller.
	ObservedGeneration *int `json:"observedGeneration,omitempty" yaml:"observedGeneration,omitempty"`

	// The total number of nodes that are running updated daemon pod
	UpdatedNumberScheduled *int `json:"updatedNumberScheduled,omitempty" yaml:"updatedNumberScheduled,omitempty"`
}

func NewDaemonSetStatus() *DaemonSetStatus {
	return &DaemonSetStatus{}
}

func NewDaemonSetStatusWithSpec(spec *DaemonSetStatus) *DaemonSetStatus {
	
	return spec
}

func RegisterDaemonSetStatus(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[DaemonSetStatus]()).JsNamespace("k8s.apps.v1").Fields(
		js.Field("CollisionCount"),
		js.Field("Conditions"),
		js.Field("CurrentNumberScheduled"),
		js.Field("DesiredNumberScheduled"),
		js.Field("NumberAvailable"),
		js.Field("NumberMisscheduled"),
		js.Field("NumberReady"),
		js.Field("NumberUnavailable"),
		js.Field("ObservedGeneration"),
		js.Field("UpdatedNumberScheduled"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewDaemonSetStatus)),
		js.Constructor(reflect.ValueOf(NewDaemonSetStatusWithSpec)),
	)
}