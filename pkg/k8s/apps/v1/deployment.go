// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// Deployment enables declarative updates for Pods and ReplicaSets.
type Deployment struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty"`

	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *apimachinerymetav1.ObjectMeta `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// Specification of the desired behavior of the Deployment.
	Spec *DeploymentSpec `json:"spec,omitempty" yaml:"spec,omitempty"`
}

func NewDeployment() *Deployment {
	return &Deployment{}
}

func NewDeploymentWithSpec(spec *Deployment) *Deployment {
	version := "v1"
	kind := "Deployment"
	
	spec.ApiVersion = &version
	spec.Kind = &kind
	return spec
}

func RegisterDeployment(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[Deployment]()).JsNamespace("k8s.apps.v1").Fields(
		js.Field("ApiVersion"),
		js.Field("Kind"),
		js.Field("Metadata"),
		js.Field("Spec"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewDeployment)),
		js.Constructor(reflect.ValueOf(NewDeploymentWithSpec)),
	)
}