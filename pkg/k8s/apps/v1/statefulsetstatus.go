// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// StatefulSetStatus represents the current state of a StatefulSet.
type StatefulSetStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.
	AvailableReplicas *int `json:"availableReplicas,omitempty" yaml:"availableReplicas,omitempty"`

	// CollisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int `json:"collisionCount,omitempty" yaml:"collisionCount,omitempty"`

	// Represents the latest available observations of a statefulset's current state.
	Conditions []*StatefulSetCondition `json:"conditions,omitempty" yaml:"conditions,omitempty"`

	// CurrentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
	CurrentReplicas *int `json:"currentReplicas,omitempty" yaml:"currentReplicas,omitempty"`

	// CurrentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
	CurrentRevision *string `json:"currentRevision,omitempty" yaml:"currentRevision,omitempty"`

	// ObservedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
	ObservedGeneration *int `json:"observedGeneration,omitempty" yaml:"observedGeneration,omitempty"`

	// ReadyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
	ReadyReplicas *int `json:"readyReplicas,omitempty" yaml:"readyReplicas,omitempty"`

	// Replicas is the number of Pods created by the StatefulSet controller.
	Replicas int `json:"replicas" yaml:"replicas"`

	// UpdateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
	UpdateRevision *string `json:"updateRevision,omitempty" yaml:"updateRevision,omitempty"`

	// UpdatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
	UpdatedReplicas *int `json:"updatedReplicas,omitempty" yaml:"updatedReplicas,omitempty"`
}

func NewStatefulSetStatus() *StatefulSetStatus {
	return &StatefulSetStatus{}
}

func NewStatefulSetStatusWithSpec(spec *StatefulSetStatus) *StatefulSetStatus {
	
	return spec
}

func RegisterStatefulSetStatus(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[StatefulSetStatus]()).JsNamespace("k8s.apps.v1").Fields(
		js.Field("AvailableReplicas"),
		js.Field("CollisionCount"),
		js.Field("Conditions"),
		js.Field("CurrentReplicas"),
		js.Field("CurrentRevision"),
		js.Field("ObservedGeneration"),
		js.Field("ReadyReplicas"),
		js.Field("Replicas"),
		js.Field("UpdateRevision"),
		js.Field("UpdatedReplicas"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewStatefulSetStatus)),
		js.Constructor(reflect.ValueOf(NewStatefulSetStatusWithSpec)),
	)
}