// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
type ControllerRevision struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty"`

	// Data is the serialized representation of the state.
	Data *any `json:"data,omitempty" yaml:"data,omitempty"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty"`

	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *apimachinerymetav1.ObjectMeta `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// Revision indicates the revision of the state represented by Data.
	Revision int `json:"revision" yaml:"revision"`
}

func NewControllerRevision() *ControllerRevision {
	return &ControllerRevision{}
}

func NewControllerRevisionWithSpec(spec *ControllerRevision) *ControllerRevision {
	version := "v1"
	kind := "ControllerRevision"
	
	spec.ApiVersion = &version
	spec.Kind = &kind
	return spec
}

func RegisterControllerRevision(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ControllerRevision]()).JsNamespace("k8s.apps.v1").Fields(
		js.Field("ApiVersion"),
		js.Field("Data"),
		js.Field("Kind"),
		js.Field("Metadata"),
		js.Field("Revision"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewControllerRevision)),
		js.Constructor(reflect.ValueOf(NewControllerRevisionWithSpec)),
	)
}