// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
	corev1 "github.com/ohayocorp/anemos/pkg/k8s/core/v1"
)

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `json:"minReadySeconds,omitempty" yaml:"minReadySeconds,omitempty"`

	// Indicates that the deployment is paused.
	Paused *bool `json:"paused,omitempty" yaml:"paused,omitempty"`

	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds *int `json:"progressDeadlineSeconds,omitempty" yaml:"progressDeadlineSeconds,omitempty"`

	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	Replicas *int `json:"replicas,omitempty" yaml:"replicas,omitempty"`

	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty" yaml:"revisionHistoryLimit,omitempty"`

	// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.
	Selector *apimachinerymetav1.LabelSelector `json:"selector" yaml:"selector"`

	// The deployment strategy to use to replace existing pods with new ones.
	Strategy *DeploymentStrategy `json:"strategy,omitempty" yaml:"strategy,omitempty"`

	// Template describes the pods that will be created. The only allowed template.spec.restartPolicy value is "Always".
	Template *corev1.PodTemplateSpec `json:"template" yaml:"template"`
}

func NewDeploymentSpec() *DeploymentSpec {
	return &DeploymentSpec{}
}

func NewDeploymentSpecWithSpec(spec *DeploymentSpec) *DeploymentSpec {
	
	return spec
}

func RegisterDeploymentSpec(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[DeploymentSpec]()).JsNamespace("k8s.apps.v1").Fields(
		js.Field("MinReadySeconds"),
		js.Field("Paused"),
		js.Field("ProgressDeadlineSeconds"),
		js.Field("Replicas"),
		js.Field("RevisionHistoryLimit"),
		js.Field("Selector"),
		js.Field("Strategy"),
		js.Field("Template"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewDeploymentSpec)),
		js.Constructor(reflect.ValueOf(NewDeploymentSpecWithSpec)),
	)
}