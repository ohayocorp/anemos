// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// StatefulSetCondition describes the state of a statefulset at a certain point.
type StatefulSetCondition struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" yaml:"lastTransitionTime,omitempty"`

	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty"`

	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status" yaml:"status"`

	// Type of statefulset condition.
	Type string `json:"type" yaml:"type"`
}

func NewStatefulSetCondition() *StatefulSetCondition {
	return &StatefulSetCondition{}
}

func NewStatefulSetConditionWithSpec(spec *StatefulSetCondition) *StatefulSetCondition {
	
	return spec
}

func RegisterStatefulSetCondition(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[StatefulSetCondition]()).JsNamespace("k8s.apps.v1").Fields(
		js.Field("LastTransitionTime"),
		js.Field("Message"),
		js.Field("Reason"),
		js.Field("Status"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewStatefulSetCondition)),
		js.Constructor(reflect.ValueOf(NewStatefulSetConditionWithSpec)),
	)
}