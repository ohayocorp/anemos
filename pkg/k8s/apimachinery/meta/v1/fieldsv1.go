// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
// Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
// The exact format is defined in sigs.k8s.io/structured-merge-diff
type FieldsV1 struct {
	
}

func NewFieldsV1() *FieldsV1 {
	return &FieldsV1{}
}

func NewFieldsV1WithSpec(spec *FieldsV1) *FieldsV1 {
	
	return spec
}

func RegisterFieldsV1(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[FieldsV1]()).JsNamespace("k8s.apimachinery.meta.v1").Fields(
		
	).Constructors(
		js.Constructor(reflect.ValueOf(NewFieldsV1)),
		js.Constructor(reflect.ValueOf(NewFieldsV1WithSpec)),
	)
}