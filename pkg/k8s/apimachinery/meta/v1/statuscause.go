// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type StatusCause struct {
	// The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	Field *string `json:"field,omitempty" yaml:"field,omitempty"`

	// A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// A machine-readable description of the cause of the error. If this value is empty there is no information available.
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty"`
}

func NewStatusCause() *StatusCause {
	return &StatusCause{}
}

func NewStatusCauseWithSpec(spec *StatusCause) *StatusCause {
	
	return spec
}

func RegisterStatusCause(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[StatusCause]()).JsNamespace("k8s.apimachinery.meta.v1").Fields(
		js.Field("Field"),
		js.Field("Message"),
		js.Field("Reason"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewStatusCause)),
		js.Constructor(reflect.ValueOf(NewStatusCauseWithSpec)),
	)
}