// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReference struct {
	// API version of the referent.
	ApiVersion string `json:"apiVersion" yaml:"apiVersion"`

	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion *bool `json:"blockOwnerDeletion,omitempty" yaml:"blockOwnerDeletion,omitempty"`

	// If true, this reference points to the managing controller.
	Controller *bool `json:"controller,omitempty" yaml:"controller,omitempty"`

	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind" yaml:"kind"`

	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name string `json:"name" yaml:"name"`

	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid string `json:"uid" yaml:"uid"`
}

func NewOwnerReference() *OwnerReference {
	return &OwnerReference{}
}

func NewOwnerReferenceWithSpec(spec *OwnerReference) *OwnerReference {
	
	return spec
}

func RegisterOwnerReference(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[OwnerReference]()).JsNamespace("k8s.apimachinery.meta.v1").Fields(
		js.Field("ApiVersion"),
		js.Field("BlockOwnerDeletion"),
		js.Field("Controller"),
		js.Field("Kind"),
		js.Field("Name"),
		js.Field("Uid"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewOwnerReference)),
		js.Constructor(reflect.ValueOf(NewOwnerReferenceWithSpec)),
	)
}