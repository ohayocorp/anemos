// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
type HTTPIngressRuleValue struct {
	// Paths is a collection of paths that map requests to backends.
	Paths []*HTTPIngressPath `json:"paths" yaml:"paths"`
}

func NewHTTPIngressRuleValue() *HTTPIngressRuleValue {
	return &HTTPIngressRuleValue{}
}

func NewHTTPIngressRuleValueWithSpec(spec *HTTPIngressRuleValue) *HTTPIngressRuleValue {
	
	return spec
}

func RegisterHTTPIngressRuleValue(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[HTTPIngressRuleValue]()).JsNamespace("k8s.networking.v1").Fields(
		js.Field("Paths"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewHTTPIngressRuleValue)),
		js.Constructor(reflect.ValueOf(NewHTTPIngressRuleValueWithSpec)),
	)
}