// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
type NetworkPolicyPeer struct {
	// IpBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
	IpBlock *IPBlock `json:"ipBlock,omitempty" yaml:"ipBlock,omitempty"`

	// NamespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
	// If podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.
	NamespaceSelector *apimachinerymetav1.LabelSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty"`

	// PodSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
	// If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.
	PodSelector *apimachinerymetav1.LabelSelector `json:"podSelector,omitempty" yaml:"podSelector,omitempty"`
}

func NewNetworkPolicyPeer() *NetworkPolicyPeer {
	return &NetworkPolicyPeer{}
}

func NewNetworkPolicyPeerWithSpec(spec *NetworkPolicyPeer) *NetworkPolicyPeer {
	
	return spec
}

func RegisterNetworkPolicyPeer(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[NetworkPolicyPeer]()).JsNamespace("k8s.networking.v1").Fields(
		js.Field("IpBlock"),
		js.Field("NamespaceSelector"),
		js.Field("PodSelector"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewNetworkPolicyPeer)),
		js.Constructor(reflect.ValueOf(NewNetworkPolicyPeerWithSpec)),
	)
}