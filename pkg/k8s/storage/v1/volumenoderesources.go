// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResources struct {
	// Count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
	Count *int `json:"count,omitempty" yaml:"count,omitempty"`
}

func NewVolumeNodeResources() *VolumeNodeResources {
	return &VolumeNodeResources{}
}

func NewVolumeNodeResourcesWithSpec(spec *VolumeNodeResources) *VolumeNodeResources {
	
	return spec
}

func RegisterVolumeNodeResources(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[VolumeNodeResources]()).JsNamespace("k8s.storage.v1").Fields(
		js.Field("Count"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewVolumeNodeResources)),
		js.Constructor(reflect.ValueOf(NewVolumeNodeResourcesWithSpec)),
	)
}