// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.
type SuccessPolicy struct {
	// Rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded >= .spec.completions`. Once any of the rules are met, the "SuccessCriteriaMet" condition is added, and the lingering pods are removed. The terminal state for such a Job has the "Complete" condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.
	Rules []*SuccessPolicyRule `json:"rules" yaml:"rules"`
}

func NewSuccessPolicy() *SuccessPolicy {
	return &SuccessPolicy{}
}

func NewSuccessPolicyWithSpec(spec *SuccessPolicy) *SuccessPolicy {
	
	return spec
}

func RegisterSuccessPolicy(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[SuccessPolicy]()).JsNamespace("k8s.batch.v1").Fields(
		js.Field("Rules"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewSuccessPolicy)),
		js.Constructor(reflect.ValueOf(NewSuccessPolicyWithSpec)),
	)
}