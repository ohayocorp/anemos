// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
type PodFailurePolicyRule struct {
	// Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
	// - FailJob: indicates that the pod's job is marked as Failed and all
	//   running pods are terminated.
	// - FailIndex: indicates that the pod's index is marked as Failed and will
	//   not be restarted.
	// - Ignore: indicates that the counter towards the .backoffLimit is not
	//   incremented and a replacement pod is created.
	// - Count: indicates that the pod is handled in the default way - the
	//   counter towards the .backoffLimit is incremented.
	// Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
	Action string `json:"action" yaml:"action"`

	// Represents the requirement on the container exit codes.
	OnExitCodes *PodFailurePolicyOnExitCodesRequirement `json:"onExitCodes,omitempty" yaml:"onExitCodes,omitempty"`

	// Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
	OnPodConditions []*PodFailurePolicyOnPodConditionsPattern `json:"onPodConditions,omitempty" yaml:"onPodConditions,omitempty"`
}

func NewPodFailurePolicyRule() *PodFailurePolicyRule {
	return &PodFailurePolicyRule{}
}

func NewPodFailurePolicyRuleWithSpec(spec *PodFailurePolicyRule) *PodFailurePolicyRule {
	
	return spec
}

func RegisterPodFailurePolicyRule(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[PodFailurePolicyRule]()).JsNamespace("k8s.batch.v1").Fields(
		js.Field("Action"),
		js.Field("OnExitCodes"),
		js.Field("OnPodConditions"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewPodFailurePolicyRule)),
		js.Constructor(reflect.ValueOf(NewPodFailurePolicyRuleWithSpec)),
	)
}