// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// CronJobSpec describes how the job execution will look like and when it will actually run.
type CronJobSpec struct {
	// Specifies how to treat concurrent executions of a Job. Valid values are:
	// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
	ConcurrencyPolicy *string `json:"concurrencyPolicy,omitempty" yaml:"concurrencyPolicy,omitempty"`

	// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
	FailedJobsHistoryLimit *int `json:"failedJobsHistoryLimit,omitempty" yaml:"failedJobsHistoryLimit,omitempty"`

	// Specifies the job that will be created when executing a CronJob.
	JobTemplate *JobTemplateSpec `json:"jobTemplate" yaml:"jobTemplate"`

	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule string `json:"schedule" yaml:"schedule"`

	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds *int `json:"startingDeadlineSeconds,omitempty" yaml:"startingDeadlineSeconds,omitempty"`

	// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
	SuccessfulJobsHistoryLimit *int `json:"successfulJobsHistoryLimit,omitempty" yaml:"successfulJobsHistoryLimit,omitempty"`

	// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
	Suspend *bool `json:"suspend,omitempty" yaml:"suspend,omitempty"`

	// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
	TimeZone *string `json:"timeZone,omitempty" yaml:"timeZone,omitempty"`
}

func NewCronJobSpec() *CronJobSpec {
	return &CronJobSpec{}
}

func NewCronJobSpecWithSpec(spec *CronJobSpec) *CronJobSpec {
	
	return spec
}

func RegisterCronJobSpec(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[CronJobSpec]()).JsNamespace("k8s.batch.v1").Fields(
		js.Field("ConcurrencyPolicy"),
		js.Field("FailedJobsHistoryLimit"),
		js.Field("JobTemplate"),
		js.Field("Schedule"),
		js.Field("StartingDeadlineSeconds"),
		js.Field("SuccessfulJobsHistoryLimit"),
		js.Field("Suspend"),
		js.Field("TimeZone"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewCronJobSpec)),
		js.Constructor(reflect.ValueOf(NewCronJobSpecWithSpec)),
	)
}