// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
type EventSeries struct {
	// Count is the number of occurrences in this series up to the last heartbeat time.
	Count int `json:"count" yaml:"count"`

	// LastObservedTime is the time when last Event from the series was seen before last heartbeat.
	LastObservedTime string `json:"lastObservedTime" yaml:"lastObservedTime"`
}

func NewEventSeries() *EventSeries {
	return &EventSeries{}
}

func NewEventSeriesWithSpec(spec *EventSeries) *EventSeries {
	
	return spec
}

func RegisterEventSeries(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[EventSeries]()).JsNamespace("k8s.events.v1").Fields(
		js.Field("Count"),
		js.Field("LastObservedTime"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewEventSeries)),
		js.Constructor(reflect.ValueOf(NewEventSeriesWithSpec)),
	)
}