// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// FlowSchemaCondition describes conditions for a FlowSchema.
type FlowSchemaCondition struct {
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" yaml:"lastTransitionTime,omitempty"`

	// `message` is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty"`

	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `json:"status,omitempty" yaml:"status,omitempty"`

	// `type` is the type of the condition. Required.
	Type *string `json:"type,omitempty" yaml:"type,omitempty"`
}

func NewFlowSchemaCondition() *FlowSchemaCondition {
	return &FlowSchemaCondition{}
}

func NewFlowSchemaConditionWithSpec(spec *FlowSchemaCondition) *FlowSchemaCondition {
	
	return spec
}

func RegisterFlowSchemaCondition(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[FlowSchemaCondition]()).JsNamespace("k8s.flowcontrol.v1").Fields(
		js.Field("LastTransitionTime"),
		js.Field("Message"),
		js.Field("Reason"),
		js.Field("Status"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewFlowSchemaCondition)),
		js.Constructor(reflect.ValueOf(NewFlowSchemaConditionWithSpec)),
	)
}