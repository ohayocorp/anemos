// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type NonResourcePolicyRule struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs []string `json:"nonResourceURLs" yaml:"nonResourceURLs"`

	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
	Verbs []string `json:"verbs" yaml:"verbs"`
}

func NewNonResourcePolicyRule() *NonResourcePolicyRule {
	return &NonResourcePolicyRule{}
}

func NewNonResourcePolicyRuleWithSpec(spec *NonResourcePolicyRule) *NonResourcePolicyRule {
	
	return spec
}

func RegisterNonResourcePolicyRule(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[NonResourcePolicyRule]()).JsNamespace("k8s.flowcontrol.v1").Fields(
		js.Field("NonResourceURLs"),
		js.Field("Verbs"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewNonResourcePolicyRule)),
		js.Constructor(reflect.ValueOf(NewNonResourcePolicyRuleWithSpec)),
	)
}