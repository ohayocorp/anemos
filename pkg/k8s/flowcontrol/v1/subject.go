// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type Subject struct {
	// `group` matches based on user group name.
	Group *GroupSubject `json:"group,omitempty" yaml:"group,omitempty"`

	// `kind` indicates which one of the other fields is non-empty. Required
	Kind string `json:"kind" yaml:"kind"`

	// `serviceAccount` matches ServiceAccounts.
	ServiceAccount *ServiceAccountSubject `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty"`

	// `user` matches based on username.
	User *UserSubject `json:"user,omitempty" yaml:"user,omitempty"`
}

func NewSubject() *Subject {
	return &Subject{}
}

func NewSubjectWithSpec(spec *Subject) *Subject {
	
	return spec
}

func RegisterSubject(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[Subject]()).JsNamespace("k8s.flowcontrol.v1").Fields(
		js.Field("Group"),
		js.Field("Kind"),
		js.Field("ServiceAccount"),
		js.Field("User"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewSubject)),
		js.Constructor(reflect.ValueOf(NewSubjectWithSpec)),
	)
}