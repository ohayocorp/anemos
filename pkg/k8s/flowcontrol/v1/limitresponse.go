// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// LimitResponse defines how to handle requests that can not be executed right now.
type LimitResponse struct {
	// `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
	Queuing *QueuingConfiguration `json:"queuing,omitempty" yaml:"queuing,omitempty"`

	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
	Type string `json:"type" yaml:"type"`
}

func NewLimitResponse() *LimitResponse {
	return &LimitResponse{}
}

func NewLimitResponseWithSpec(spec *LimitResponse) *LimitResponse {
	
	return spec
}

func RegisterLimitResponse(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[LimitResponse]()).JsNamespace("k8s.flowcontrol.v1").Fields(
		js.Field("Queuing"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewLimitResponse)),
		js.Constructor(reflect.ValueOf(NewLimitResponseWithSpec)),
	)
}