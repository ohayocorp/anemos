// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// DeviceClaim defines how to request devices with a ResourceClaim.
type DeviceClaim struct {
	// This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
	Config []*DeviceClaimConfiguration `json:"config,omitempty" yaml:"config,omitempty"`

	// These constraints must be satisfied by the set of devices that get allocated for the claim.
	Constraints []*DeviceConstraint `json:"constraints,omitempty" yaml:"constraints,omitempty"`

	// Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
	Requests []*DeviceRequest `json:"requests,omitempty" yaml:"requests,omitempty"`
}

func NewDeviceClaim() *DeviceClaim {
	return &DeviceClaim{}
}

func NewDeviceClaimWithSpec(spec *DeviceClaim) *DeviceClaim {
	
	return spec
}

func RegisterDeviceClaim(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[DeviceClaim]()).JsNamespace("k8s.resource.v1").Fields(
		js.Field("Config"),
		js.Field("Constraints"),
		js.Field("Requests"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewDeviceClaim)),
		js.Constructor(reflect.ValueOf(NewDeviceClaimWithSpec)),
	)
}