// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// CounterSet defines a named set of counters that are available to be used by devices defined in the ResourceSlice.
// The counters are not allocatable by themselves, but can be referenced by devices. When a device is allocated, the portion of counters it uses will no longer be available for use by other devices.
type CounterSet struct {
	// Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.
	// The maximum number of counters in all sets is 32.
	Counters map[string]*Counter `json:"counters" yaml:"counters"`

	// Name defines the name of the counter set. It must be a DNS label.
	Name string `json:"name" yaml:"name"`
}

func NewCounterSet() *CounterSet {
	return &CounterSet{}
}

func NewCounterSetWithSpec(spec *CounterSet) *CounterSet {
	
	return spec
}

func RegisterCounterSet(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[CounterSet]()).JsNamespace("k8s.resource.v1").Fields(
		js.Field("Counters"),
		js.Field("Name"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewCounterSet)),
		js.Constructor(reflect.ValueOf(NewCounterSetWithSpec)),
	)
}