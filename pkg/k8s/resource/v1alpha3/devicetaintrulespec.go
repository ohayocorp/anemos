// Code generated by types_generator.go; DO NOT EDIT.

package v1alpha3

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// DeviceTaintRuleSpec specifies the selector and one taint.
type DeviceTaintRuleSpec struct {
	// DeviceSelector defines which device(s) the taint is applied to. All selector criteria must be satified for a device to match. The empty selector matches all devices. Without a selector, no devices are matches.
	DeviceSelector *DeviceTaintSelector `json:"deviceSelector,omitempty" yaml:"deviceSelector,omitempty"`

	// The taint that gets applied to matching devices.
	Taint *DeviceTaint `json:"taint" yaml:"taint"`
}

func NewDeviceTaintRuleSpec() *DeviceTaintRuleSpec {
	return &DeviceTaintRuleSpec{}
}

func NewDeviceTaintRuleSpecWithSpec(spec *DeviceTaintRuleSpec) *DeviceTaintRuleSpec {
	
	return spec
}

func RegisterDeviceTaintRuleSpec(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[DeviceTaintRuleSpec]()).JsNamespace("k8s.resource.v1alpha3").Fields(
		js.Field("DeviceSelector"),
		js.Field("Taint"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewDeviceTaintRuleSpec)),
		js.Constructor(reflect.ValueOf(NewDeviceTaintRuleSpecWithSpec)),
	)
}