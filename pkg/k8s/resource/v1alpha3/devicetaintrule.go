// Code generated by types_generator.go; DO NOT EDIT.

package v1alpha3

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// DeviceTaintRule adds one taint to all devices which match the selector. This has the same effect as if the taint was specified directly in the ResourceSlice by the DRA driver.
type DeviceTaintRule struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty"`

	// Standard object metadata
	Metadata *apimachinerymetav1.ObjectMeta `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// Spec specifies the selector and one taint.
	// Changing the spec automatically increments the metadata.generation number.
	Spec *DeviceTaintRuleSpec `json:"spec" yaml:"spec"`
}

func NewDeviceTaintRule() *DeviceTaintRule {
	return &DeviceTaintRule{}
}

func NewDeviceTaintRuleWithSpec(spec *DeviceTaintRule) *DeviceTaintRule {
	version := "v1alpha3"
	kind := "DeviceTaintRule"
	
	spec.ApiVersion = &version
	spec.Kind = &kind
	return spec
}

func RegisterDeviceTaintRule(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[DeviceTaintRule]()).JsNamespace("k8s.resource.v1alpha3").Fields(
		js.Field("ApiVersion"),
		js.Field("Kind"),
		js.Field("Metadata"),
		js.Field("Spec"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewDeviceTaintRule)),
		js.Constructor(reflect.ValueOf(NewDeviceTaintRuleWithSpec)),
	)
}