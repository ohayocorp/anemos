// Code generated by types_generator.go; DO NOT EDIT.

package v1beta2

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// ResourceClaimTemplate is used to produce ResourceClaim objects.
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimTemplate struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty"`

	// Standard object metadata
	Metadata *apimachinerymetav1.ObjectMeta `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// Describes the ResourceClaim that is to be generated.
	// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
	Spec *ResourceClaimTemplateSpec `json:"spec" yaml:"spec"`
}

func NewResourceClaimTemplate() *ResourceClaimTemplate {
	return &ResourceClaimTemplate{}
}

func NewResourceClaimTemplateWithSpec(spec *ResourceClaimTemplate) *ResourceClaimTemplate {
	version := "v1beta2"
	kind := "ResourceClaimTemplate"
	
	spec.ApiVersion = &version
	spec.Kind = &kind
	return spec
}

func RegisterResourceClaimTemplate(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ResourceClaimTemplate]()).JsNamespace("k8s.resource.v1beta2").Fields(
		js.Field("ApiVersion"),
		js.Field("Kind"),
		js.Field("Metadata"),
		js.Field("Spec"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewResourceClaimTemplate)),
		js.Constructor(reflect.ValueOf(NewResourceClaimTemplateWithSpec)),
	)
}