// Code generated by types_generator.go; DO NOT EDIT.

package v1beta2

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// AllocatedDeviceStatus contains the status of an allocated device, if the driver chooses to report it. This may include driver-specific information.
// The combination of Driver, Pool, Device, and ShareID must match the corresponding key in Status.Allocation.Devices.
type AllocatedDeviceStatus struct {
	// Conditions contains the latest observation of the device's state. If the device has been configured according to the class and claim config references, the `Ready` condition should be True.
	// Must not contain more than 8 entries.
	Conditions []*apimachinerymetav1.Condition `json:"conditions,omitempty" yaml:"conditions,omitempty"`

	// Data contains arbitrary driver-specific data.
	// The length of the raw data must be smaller or equal to 10 Ki.
	Data *any `json:"data,omitempty" yaml:"data,omitempty"`

	// Device references one device instance via its name in the driver's resource pool. It must be a DNS label.
	Device string `json:"device" yaml:"device"`

	// Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.
	// Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
	Driver string `json:"driver" yaml:"driver"`

	// NetworkData contains network-related information specific to the device.
	NetworkData *NetworkDeviceData `json:"networkData,omitempty" yaml:"networkData,omitempty"`

	// This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).
	// Must not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.
	Pool string `json:"pool" yaml:"pool"`

	// ShareID uniquely identifies an individual allocation share of the device.
	ShareID *string `json:"shareID,omitempty" yaml:"shareID,omitempty"`
}

func NewAllocatedDeviceStatus() *AllocatedDeviceStatus {
	return &AllocatedDeviceStatus{}
}

func NewAllocatedDeviceStatusWithSpec(spec *AllocatedDeviceStatus) *AllocatedDeviceStatus {
	
	return spec
}

func RegisterAllocatedDeviceStatus(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[AllocatedDeviceStatus]()).JsNamespace("k8s.resource.v1beta2").Fields(
		js.Field("Conditions"),
		js.Field("Data"),
		js.Field("Device"),
		js.Field("Driver"),
		js.Field("NetworkData"),
		js.Field("Pool"),
		js.Field("ShareID"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewAllocatedDeviceStatus)),
		js.Constructor(reflect.ValueOf(NewAllocatedDeviceStatusWithSpec)),
	)
}