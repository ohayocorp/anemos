// Code generated by types_generator.go; DO NOT EDIT.

package v1beta2

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// DeviceCounterConsumption defines a set of counters that a device will consume from a CounterSet.
type DeviceCounterConsumption struct {
	// CounterSet is the name of the set from which the counters defined will be consumed.
	CounterSet string `json:"counterSet" yaml:"counterSet"`

	// Counters defines the counters that will be consumed by the device.
	// The maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each).
	Counters map[string]*Counter `json:"counters" yaml:"counters"`
}

func NewDeviceCounterConsumption() *DeviceCounterConsumption {
	return &DeviceCounterConsumption{}
}

func NewDeviceCounterConsumptionWithSpec(spec *DeviceCounterConsumption) *DeviceCounterConsumption {
	
	return spec
}

func RegisterDeviceCounterConsumption(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[DeviceCounterConsumption]()).JsNamespace("k8s.resource.v1beta2").Fields(
		js.Field("CounterSet"),
		js.Field("Counters"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewDeviceCounterConsumption)),
		js.Constructor(reflect.ValueOf(NewDeviceCounterConsumptionWithSpec)),
	)
}