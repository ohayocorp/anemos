// Code generated by types_generator.go; DO NOT EDIT.

package v1beta2

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpec struct {
	// ObjectMeta may contain labels and annotations that will be copied into the ResourceClaim when creating it. No other fields are allowed and will be rejected during validation.
	Metadata *apimachinerymetav1.ObjectMeta `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
	Spec *ResourceClaimSpec `json:"spec" yaml:"spec"`
}

func NewResourceClaimTemplateSpec() *ResourceClaimTemplateSpec {
	return &ResourceClaimTemplateSpec{}
}

func NewResourceClaimTemplateSpecWithSpec(spec *ResourceClaimTemplateSpec) *ResourceClaimTemplateSpec {
	
	return spec
}

func RegisterResourceClaimTemplateSpec(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ResourceClaimTemplateSpec]()).JsNamespace("k8s.resource.v1beta2").Fields(
		js.Field("Metadata"),
		js.Field("Spec"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewResourceClaimTemplateSpec)),
		js.Constructor(reflect.ValueOf(NewResourceClaimTemplateSpecWithSpec)),
	)
}