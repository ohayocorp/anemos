// Code generated by types_generator.go; DO NOT EDIT.

package v1beta2

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.
type DeviceClassSpec struct {
	// Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.
	// They are passed to the driver, but are not considered while allocating the claim.
	Config []*DeviceClassConfiguration `json:"config,omitempty" yaml:"config,omitempty"`

	// ExtendedResourceName is the extended resource name for the devices of this class. The devices of this class can be used to satisfy a pod's extended resource requests. It has the same format as the name of a pod's extended resource. It should be unique among all the device classes in a cluster. If two device classes have the same name, then the class created later is picked to satisfy a pod's extended resource requests. If two classes are created at the same time, then the name of the class lexicographically sorted first is picked.
	// This is an alpha field.
	ExtendedResourceName *string `json:"extendedResourceName,omitempty" yaml:"extendedResourceName,omitempty"`

	// Each selector must be satisfied by a device which is claimed via this class.
	Selectors []*DeviceSelector `json:"selectors,omitempty" yaml:"selectors,omitempty"`
}

func NewDeviceClassSpec() *DeviceClassSpec {
	return &DeviceClassSpec{}
}

func NewDeviceClassSpecWithSpec(spec *DeviceClassSpec) *DeviceClassSpec {
	
	return spec
}

func RegisterDeviceClassSpec(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[DeviceClassSpec]()).JsNamespace("k8s.resource.v1beta2").Fields(
		js.Field("Config"),
		js.Field("ExtendedResourceName"),
		js.Field("Selectors"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewDeviceClassSpec)),
		js.Constructor(reflect.ValueOf(NewDeviceClassSpecWithSpec)),
	)
}