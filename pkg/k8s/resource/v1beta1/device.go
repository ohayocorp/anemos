// Code generated by types_generator.go; DO NOT EDIT.

package v1beta1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.
type Device struct {
	// Basic defines one device instance.
	Basic *BasicDevice `json:"basic,omitempty" yaml:"basic,omitempty"`

	// Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.
	Name string `json:"name" yaml:"name"`
}

func NewDevice() *Device {
	return &Device{}
}

func NewDeviceWithSpec(spec *Device) *Device {
	
	return spec
}

func RegisterDevice(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[Device]()).JsNamespace("k8s.resource.v1beta1").Fields(
		js.Field("Basic"),
		js.Field("Name"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewDevice)),
		js.Constructor(reflect.ValueOf(NewDeviceWithSpec)),
	)
}