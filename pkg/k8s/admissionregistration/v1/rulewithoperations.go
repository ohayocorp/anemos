// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.
type RuleWithOperations struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
	ApiGroups *[]string `json:"apiGroups,omitempty" yaml:"apiGroups,omitempty"`

	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
	ApiVersions *[]string `json:"apiVersions,omitempty" yaml:"apiVersions,omitempty"`

	// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
	Operations *[]string `json:"operations,omitempty" yaml:"operations,omitempty"`

	// Resources is a list of resources this rule applies to.
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
	// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources *[]string `json:"resources,omitempty" yaml:"resources,omitempty"`

	// Scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
	Scope *string `json:"scope,omitempty" yaml:"scope,omitempty"`
}

func NewRuleWithOperations() *RuleWithOperations {
	return &RuleWithOperations{}
}

func NewRuleWithOperationsWithSpec(spec *RuleWithOperations) *RuleWithOperations {
	
	return spec
}

func RegisterRuleWithOperations(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[RuleWithOperations]()).JsNamespace("k8s.admissionregistration.v1").Fields(
		js.Field("ApiGroups"),
		js.Field("ApiVersions"),
		js.Field("Operations"),
		js.Field("Resources"),
		js.Field("Scope"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewRuleWithOperations)),
		js.Constructor(reflect.ValueOf(NewRuleWithOperationsWithSpec)),
	)
}