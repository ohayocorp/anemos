// Code generated by types_generator.go; DO NOT EDIT.

package v1beta1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// Mutation specifies the CEL expression which is used to apply the Mutation.
type Mutation struct {
	// ApplyConfiguration defines the desired configuration values of an object. The configuration is applied to the admission object using [structured merge diff](https://github.com/kubernetes-sigs/structured-merge-diff). A CEL expression is used to create apply configuration.
	ApplyConfiguration *ApplyConfiguration `json:"applyConfiguration,omitempty" yaml:"applyConfiguration,omitempty"`

	// JsonPatch defines a [JSON patch](https://jsonpatch.com/) operation to perform a mutation to the object. A CEL expression is used to create the JSON patch.
	JsonPatch *JSONPatch `json:"jsonPatch,omitempty" yaml:"jsonPatch,omitempty"`

	// PatchType indicates the patch strategy used. Allowed values are "ApplyConfiguration" and "JSONPatch". Required.
	PatchType string `json:"patchType" yaml:"patchType"`
}

func NewMutation() *Mutation {
	return &Mutation{}
}

func NewMutationWithSpec(spec *Mutation) *Mutation {
	
	return spec
}

func RegisterMutation(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[Mutation]()).JsNamespace("k8s.admissionregistration.v1beta1").Fields(
		js.Field("ApplyConfiguration"),
		js.Field("JsonPatch"),
		js.Field("PatchType"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewMutation)),
		js.Constructor(reflect.ValueOf(NewMutationWithSpec)),
	)
}