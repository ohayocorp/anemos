// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// EnvVar represents an environment variable present in a Container.
type EnvVar struct {
	// Name of the environment variable. May consist of any printable ASCII characters except '='.
	Name string `json:"name" yaml:"name"`

	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `json:"value,omitempty" yaml:"value,omitempty"`

	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *EnvVarSource `json:"valueFrom,omitempty" yaml:"valueFrom,omitempty"`
}

func NewEnvVar() *EnvVar {
	return &EnvVar{}
}

func NewEnvVarWithSpec(spec *EnvVar) *EnvVar {
	
	return spec
}

func RegisterEnvVar(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[EnvVar]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Name"),
		js.Field("Value"),
		js.Field("ValueFrom"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewEnvVar)),
		js.Constructor(reflect.ValueOf(NewEnvVarWithSpec)),
	)
}