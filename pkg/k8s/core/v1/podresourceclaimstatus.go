// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim which references a ResourceClaimTemplate. It stores the generated name for the corresponding ResourceClaim.
type PodResourceClaimStatus struct {
	// Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL.
	Name string `json:"name" yaml:"name"`

	// ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. If this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.
	ResourceClaimName *string `json:"resourceClaimName,omitempty" yaml:"resourceClaimName,omitempty"`
}

func NewPodResourceClaimStatus() *PodResourceClaimStatus {
	return &PodResourceClaimStatus{}
}

func NewPodResourceClaimStatusWithSpec(spec *PodResourceClaimStatus) *PodResourceClaimStatus {
	
	return spec
}

func RegisterPodResourceClaimStatus(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[PodResourceClaimStatus]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Name"),
		js.Field("ResourceClaimName"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewPodResourceClaimStatus)),
		js.Constructor(reflect.ValueOf(NewPodResourceClaimStatusWithSpec)),
	)
}