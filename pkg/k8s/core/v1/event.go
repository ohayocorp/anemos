// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type Event struct {
	// What action was taken/failed regarding to the Regarding object.
	Action *string `json:"action,omitempty" yaml:"action,omitempty"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty"`

	// The number of times this event has occurred.
	Count *int `json:"count,omitempty" yaml:"count,omitempty"`

	// Time when this Event was first observed.
	EventTime *string `json:"eventTime,omitempty" yaml:"eventTime,omitempty"`

	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp *string `json:"firstTimestamp,omitempty" yaml:"firstTimestamp,omitempty"`

	// The object that this event is about.
	InvolvedObject *ObjectReference `json:"involvedObject" yaml:"involvedObject"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty"`

	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp *string `json:"lastTimestamp,omitempty" yaml:"lastTimestamp,omitempty"`

	// A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *apimachinerymetav1.ObjectMeta `json:"metadata" yaml:"metadata"`

	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty"`

	// Optional secondary object for more complex actions.
	Related *ObjectReference `json:"related,omitempty" yaml:"related,omitempty"`

	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent *string `json:"reportingComponent,omitempty" yaml:"reportingComponent,omitempty"`

	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance *string `json:"reportingInstance,omitempty" yaml:"reportingInstance,omitempty"`

	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series *EventSeries `json:"series,omitempty" yaml:"series,omitempty"`

	// The component reporting this event. Should be a short machine understandable string.
	Source *EventSource `json:"source,omitempty" yaml:"source,omitempty"`

	// Type of this event (Normal, Warning), new types could be added in the future
	Type *string `json:"type,omitempty" yaml:"type,omitempty"`
}

func NewEvent() *Event {
	return &Event{}
}

func NewEventWithSpec(spec *Event) *Event {
	version := "v1"
	kind := "Event"
	
	spec.ApiVersion = &version
	spec.Kind = &kind
	return spec
}

func RegisterEvent(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[Event]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Action"),
		js.Field("ApiVersion"),
		js.Field("Count"),
		js.Field("EventTime"),
		js.Field("FirstTimestamp"),
		js.Field("InvolvedObject"),
		js.Field("Kind"),
		js.Field("LastTimestamp"),
		js.Field("Message"),
		js.Field("Metadata"),
		js.Field("Reason"),
		js.Field("Related"),
		js.Field("ReportingComponent"),
		js.Field("ReportingInstance"),
		js.Field("Series"),
		js.Field("Source"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewEvent)),
		js.Constructor(reflect.ValueOf(NewEventWithSpec)),
	)
}