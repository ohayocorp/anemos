// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
type ScopedResourceSelectorRequirement struct {
	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
	Operator string `json:"operator" yaml:"operator"`

	// The name of the scope that the selector applies to.
	ScopeName string `json:"scopeName" yaml:"scopeName"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty" yaml:"values,omitempty"`
}

func NewScopedResourceSelectorRequirement() *ScopedResourceSelectorRequirement {
	return &ScopedResourceSelectorRequirement{}
}

func NewScopedResourceSelectorRequirementWithSpec(spec *ScopedResourceSelectorRequirement) *ScopedResourceSelectorRequirement {
	
	return spec
}

func RegisterScopedResourceSelectorRequirement(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ScopedResourceSelectorRequirement]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Operator"),
		js.Field("ScopeName"),
		js.Field("Values"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewScopedResourceSelectorRequirement)),
		js.Constructor(reflect.ValueOf(NewScopedResourceSelectorRequirementWithSpec)),
	)
}