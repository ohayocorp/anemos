// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIPersistentVolumeSource struct {
	// ChapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `json:"chapAuthDiscovery,omitempty" yaml:"chapAuthDiscovery,omitempty"`

	// ChapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `json:"chapAuthSession,omitempty" yaml:"chapAuthSession,omitempty"`

	// FsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `json:"fsType,omitempty" yaml:"fsType,omitempty"`

	// InitiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `json:"initiatorName,omitempty" yaml:"initiatorName,omitempty"`

	// Iqn is Target iSCSI Qualified Name.
	Iqn string `json:"iqn" yaml:"iqn"`

	// IscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `json:"iscsiInterface,omitempty" yaml:"iscsiInterface,omitempty"`

	// Lun is iSCSI Target Lun number.
	Lun int `json:"lun" yaml:"lun"`

	// Portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals *[]string `json:"portals,omitempty" yaml:"portals,omitempty"`

	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`

	// SecretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef *SecretReference `json:"secretRef,omitempty" yaml:"secretRef,omitempty"`

	// TargetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `json:"targetPortal" yaml:"targetPortal"`
}

func NewISCSIPersistentVolumeSource() *ISCSIPersistentVolumeSource {
	return &ISCSIPersistentVolumeSource{}
}

func NewISCSIPersistentVolumeSourceWithSpec(spec *ISCSIPersistentVolumeSource) *ISCSIPersistentVolumeSource {
	
	return spec
}

func RegisterISCSIPersistentVolumeSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ISCSIPersistentVolumeSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("ChapAuthDiscovery"),
		js.Field("ChapAuthSession"),
		js.Field("FsType"),
		js.Field("InitiatorName"),
		js.Field("Iqn"),
		js.Field("IscsiInterface"),
		js.Field("Lun"),
		js.Field("Portals"),
		js.Field("ReadOnly"),
		js.Field("SecretRef"),
		js.Field("TargetPortal"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewISCSIPersistentVolumeSource)),
		js.Constructor(reflect.ValueOf(NewISCSIPersistentVolumeSourceWithSpec)),
	)
}