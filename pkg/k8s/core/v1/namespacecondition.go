// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// NamespaceCondition contains details about state of namespace.
type NamespaceCondition struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" yaml:"lastTransitionTime,omitempty"`

	// Human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty"`

	// Type of namespace controller condition.
	Type string `json:"type" yaml:"type"`
}

func NewNamespaceCondition() *NamespaceCondition {
	return &NamespaceCondition{}
}

func NewNamespaceConditionWithSpec(spec *NamespaceCondition) *NamespaceCondition {
	
	return spec
}

func RegisterNamespaceCondition(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[NamespaceCondition]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("LastTransitionTime"),
		js.Field("Message"),
		js.Field("Reason"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewNamespaceCondition)),
		js.Constructor(reflect.ValueOf(NewNamespaceConditionWithSpec)),
	)
}