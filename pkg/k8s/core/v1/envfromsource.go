// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// EnvFromSource represents the source of a set of ConfigMaps or Secrets
type EnvFromSource struct {
	// The ConfigMap to select from
	ConfigMapRef *ConfigMapEnvSource `json:"configMapRef,omitempty" yaml:"configMapRef,omitempty"`

	// Optional text to prepend to the name of each environment variable. May consist of any printable ASCII characters except '='.
	Prefix *string `json:"prefix,omitempty" yaml:"prefix,omitempty"`

	// The Secret to select from
	SecretRef *SecretEnvSource `json:"secretRef,omitempty" yaml:"secretRef,omitempty"`
}

func NewEnvFromSource() *EnvFromSource {
	return &EnvFromSource{}
}

func NewEnvFromSourceWithSpec(spec *EnvFromSource) *EnvFromSource {
	
	return spec
}

func RegisterEnvFromSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[EnvFromSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("ConfigMapRef"),
		js.Field("Prefix"),
		js.Field("SecretRef"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewEnvFromSource)),
		js.Constructor(reflect.ValueOf(NewEnvFromSourceWithSpec)),
	)
}