// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
// 	{
// 	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
// 	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
// 	}
// The resulting set of endpoints can be viewed as:
// 	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
// 	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
// Deprecated: This API is deprecated in v1.33+.
type EndpointSubset struct {
	// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
	Addresses []*EndpointAddress `json:"addresses,omitempty" yaml:"addresses,omitempty"`

	// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
	NotReadyAddresses []*EndpointAddress `json:"notReadyAddresses,omitempty" yaml:"notReadyAddresses,omitempty"`

	// Port numbers available on the related IP addresses.
	Ports []*EndpointPort `json:"ports,omitempty" yaml:"ports,omitempty"`
}

func NewEndpointSubset() *EndpointSubset {
	return &EndpointSubset{}
}

func NewEndpointSubsetWithSpec(spec *EndpointSubset) *EndpointSubset {
	
	return spec
}

func RegisterEndpointSubset(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[EndpointSubset]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Addresses"),
		js.Field("NotReadyAddresses"),
		js.Field("Ports"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewEndpointSubset)),
		js.Constructor(reflect.ValueOf(NewEndpointSubsetWithSpec)),
	)
}