// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// PodList is a list of Pods.
type PodList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty"`

	// List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []*Pod `json:"items" yaml:"items"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty"`

	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *apimachinerymetav1.ListMeta `json:"metadata,omitempty" yaml:"metadata,omitempty"`
}

func NewPodList() *PodList {
	return &PodList{}
}

func NewPodListWithSpec(spec *PodList) *PodList {
	version := "v1"
	kind := "PodList"
	
	spec.ApiVersion = &version
	spec.Kind = &kind
	return spec
}

func RegisterPodList(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[PodList]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("ApiVersion"),
		js.Field("Items"),
		js.Field("Kind"),
		js.Field("Metadata"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewPodList)),
		js.Constructor(reflect.ValueOf(NewPodListWithSpec)),
	)
}