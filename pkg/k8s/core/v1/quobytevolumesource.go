// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
type QuobyteVolumeSource struct {
	// Group to map volume access to Default is no group
	Group *string `json:"group,omitempty" yaml:"group,omitempty"`

	// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`

	// Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry string `json:"registry" yaml:"registry"`

	// Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant *string `json:"tenant,omitempty" yaml:"tenant,omitempty"`

	// User to map volume access to Defaults to serivceaccount user
	User *string `json:"user,omitempty" yaml:"user,omitempty"`

	// Volume is a string that references an already created Quobyte volume by name.
	Volume string `json:"volume" yaml:"volume"`
}

func NewQuobyteVolumeSource() *QuobyteVolumeSource {
	return &QuobyteVolumeSource{}
}

func NewQuobyteVolumeSourceWithSpec(spec *QuobyteVolumeSource) *QuobyteVolumeSource {
	
	return spec
}

func RegisterQuobyteVolumeSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[QuobyteVolumeSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Group"),
		js.Field("ReadOnly"),
		js.Field("Registry"),
		js.Field("Tenant"),
		js.Field("User"),
		js.Field("Volume"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewQuobyteVolumeSource)),
		js.Constructor(reflect.ValueOf(NewQuobyteVolumeSourceWithSpec)),
	)
}