// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// Affinity is a group of affinity scheduling rules.
type Affinity struct {
	// Describes node affinity scheduling rules for the pod.
	NodeAffinity *NodeAffinity `json:"nodeAffinity,omitempty" yaml:"nodeAffinity,omitempty"`

	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	PodAffinity *PodAffinity `json:"podAffinity,omitempty" yaml:"podAffinity,omitempty"`

	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	PodAntiAffinity *PodAntiAffinity `json:"podAntiAffinity,omitempty" yaml:"podAntiAffinity,omitempty"`
}

func NewAffinity() *Affinity {
	return &Affinity{}
}

func NewAffinityWithSpec(spec *Affinity) *Affinity {
	
	return spec
}

func RegisterAffinity(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[Affinity]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("NodeAffinity"),
		js.Field("PodAffinity"),
		js.Field("PodAntiAffinity"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewAffinity)),
		js.Constructor(reflect.ValueOf(NewAffinityWithSpec)),
	)
}