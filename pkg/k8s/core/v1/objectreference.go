// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// ObjectReference contains enough information to let you inspect or modify the referred object.
type ObjectReference struct {
	// API version of the referent.
	ApiVersion *string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty"`

	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
	FieldPath *string `json:"fieldPath,omitempty" yaml:"fieldPath,omitempty"`

	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty"`

	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`

	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `json:"namespace,omitempty" yaml:"namespace,omitempty"`

	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `json:"resourceVersion,omitempty" yaml:"resourceVersion,omitempty"`

	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `json:"uid,omitempty" yaml:"uid,omitempty"`
}

func NewObjectReference() *ObjectReference {
	return &ObjectReference{}
}

func NewObjectReferenceWithSpec(spec *ObjectReference) *ObjectReference {
	
	return spec
}

func RegisterObjectReference(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ObjectReference]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("ApiVersion"),
		js.Field("FieldPath"),
		js.Field("Kind"),
		js.Field("Name"),
		js.Field("Namespace"),
		js.Field("ResourceVersion"),
		js.Field("Uid"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewObjectReference)),
		js.Constructor(reflect.ValueOf(NewObjectReferenceWithSpec)),
	)
}