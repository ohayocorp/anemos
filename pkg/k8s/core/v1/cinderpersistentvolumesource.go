// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderPersistentVolumeSource struct {
	// FsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `json:"fsType,omitempty" yaml:"fsType,omitempty"`

	// ReadOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`

	// SecretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef *SecretReference `json:"secretRef,omitempty" yaml:"secretRef,omitempty"`

	// VolumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `json:"volumeID" yaml:"volumeID"`
}

func NewCinderPersistentVolumeSource() *CinderPersistentVolumeSource {
	return &CinderPersistentVolumeSource{}
}

func NewCinderPersistentVolumeSourceWithSpec(spec *CinderPersistentVolumeSource) *CinderPersistentVolumeSource {
	
	return spec
}

func RegisterCinderPersistentVolumeSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[CinderPersistentVolumeSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("FsType"),
		js.Field("ReadOnly"),
		js.Field("SecretRef"),
		js.Field("VolumeID"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewCinderPersistentVolumeSource)),
		js.Constructor(reflect.ValueOf(NewCinderPersistentVolumeSourceWithSpec)),
	)
}