// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// ContainerRestartRuleOnExitCodes describes the condition for handling an exited container based on its exit codes.
type ContainerRestartRuleOnExitCodes struct {
	// Represents the relationship between the container exit code(s) and the specified values. Possible values are: - In: the requirement is satisfied if the container exit code is in the
	//   set of specified values.
	// - NotIn: the requirement is satisfied if the container exit code is
	//   not in the set of specified values.
	Operator string `json:"operator" yaml:"operator"`

	// Specifies the set of values to check for container exit codes. At most 255 elements are allowed.
	Values *[]int `json:"values,omitempty" yaml:"values,omitempty"`
}

func NewContainerRestartRuleOnExitCodes() *ContainerRestartRuleOnExitCodes {
	return &ContainerRestartRuleOnExitCodes{}
}

func NewContainerRestartRuleOnExitCodesWithSpec(spec *ContainerRestartRuleOnExitCodes) *ContainerRestartRuleOnExitCodes {
	
	return spec
}

func RegisterContainerRestartRuleOnExitCodes(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ContainerRestartRuleOnExitCodes]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Operator"),
		js.Field("Values"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewContainerRestartRuleOnExitCodes)),
		js.Constructor(reflect.ValueOf(NewContainerRestartRuleOnExitCodesWithSpec)),
	)
}