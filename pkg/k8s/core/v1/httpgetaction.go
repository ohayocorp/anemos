// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetAction struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty" yaml:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []*HTTPHeader `json:"httpHeaders,omitempty" yaml:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty" yaml:"path,omitempty"`

	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port any `json:"port" yaml:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty" yaml:"scheme,omitempty"`
}

func NewHTTPGetAction() *HTTPGetAction {
	return &HTTPGetAction{}
}

func NewHTTPGetActionWithSpec(spec *HTTPGetAction) *HTTPGetAction {
	
	return spec
}

func RegisterHTTPGetAction(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[HTTPGetAction]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Host"),
		js.Field("HttpHeaders"),
		js.Field("Path"),
		js.Field("Port"),
		js.Field("Scheme"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewHTTPGetAction)),
		js.Constructor(reflect.ValueOf(NewHTTPGetActionWithSpec)),
	)
}