// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirements struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	// This field depends on the DynamicResourceAllocation feature gate.
	// This field is immutable. It can only be set for containers.
	Claims []*ResourceClaim `json:"claims,omitempty" yaml:"claims,omitempty"`

	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits *any `json:"limits,omitempty" yaml:"limits,omitempty"`

	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests *any `json:"requests,omitempty" yaml:"requests,omitempty"`
}

func NewResourceRequirements() *ResourceRequirements {
	return &ResourceRequirements{}
}

func NewResourceRequirementsWithSpec(spec *ResourceRequirements) *ResourceRequirements {
	
	return spec
}

func RegisterResourceRequirements(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ResourceRequirements]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Claims"),
		js.Field("Limits"),
		js.Field("Requests"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewResourceRequirements)),
		js.Constructor(reflect.ValueOf(NewResourceRequirementsWithSpec)),
	)
}