// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
type ScaleIOPersistentVolumeSource struct {
	// FsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
	FsType *string `json:"fsType,omitempty" yaml:"fsType,omitempty"`

	// Gateway is the host address of the ScaleIO API Gateway.
	Gateway string `json:"gateway" yaml:"gateway"`

	// ProtectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `json:"protectionDomain,omitempty" yaml:"protectionDomain,omitempty"`

	// ReadOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`

	// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef *SecretReference `json:"secretRef" yaml:"secretRef"`

	// SslEnabled is the flag to enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `json:"sslEnabled,omitempty" yaml:"sslEnabled,omitempty"`

	// StorageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `json:"storageMode,omitempty" yaml:"storageMode,omitempty"`

	// StoragePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `json:"storagePool,omitempty" yaml:"storagePool,omitempty"`

	// System is the name of the storage system as configured in ScaleIO.
	System string `json:"system" yaml:"system"`

	// VolumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `json:"volumeName,omitempty" yaml:"volumeName,omitempty"`
}

func NewScaleIOPersistentVolumeSource() *ScaleIOPersistentVolumeSource {
	return &ScaleIOPersistentVolumeSource{}
}

func NewScaleIOPersistentVolumeSourceWithSpec(spec *ScaleIOPersistentVolumeSource) *ScaleIOPersistentVolumeSource {
	
	return spec
}

func RegisterScaleIOPersistentVolumeSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ScaleIOPersistentVolumeSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("FsType"),
		js.Field("Gateway"),
		js.Field("ProtectionDomain"),
		js.Field("ReadOnly"),
		js.Field("SecretRef"),
		js.Field("SslEnabled"),
		js.Field("StorageMode"),
		js.Field("StoragePool"),
		js.Field("System"),
		js.Field("VolumeName"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewScaleIOPersistentVolumeSource)),
		js.Constructor(reflect.ValueOf(NewScaleIOPersistentVolumeSourceWithSpec)),
	)
}