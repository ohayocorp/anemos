// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// ContainerPort represents a network port in a single container.
type ContainerPort struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort int `json:"containerPort" yaml:"containerPort"`

	// What host IP to bind the external port to.
	HostIP *string `json:"hostIP,omitempty" yaml:"hostIP,omitempty"`

	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort *int `json:"hostPort,omitempty" yaml:"hostPort,omitempty"`

	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`

	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol *string `json:"protocol,omitempty" yaml:"protocol,omitempty"`
}

func NewContainerPort() *ContainerPort {
	return &ContainerPort{}
}

func NewContainerPortWithSpec(spec *ContainerPort) *ContainerPort {
	
	return spec
}

func RegisterContainerPort(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ContainerPort]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("ContainerPort"),
		js.Field("HostIP"),
		js.Field("HostPort"),
		js.Field("Name"),
		js.Field("Protocol"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewContainerPort)),
		js.Constructor(reflect.ValueOf(NewContainerPortWithSpec)),
	)
}