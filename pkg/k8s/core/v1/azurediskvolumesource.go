// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AzureDiskVolumeSource struct {
	// CachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode *string `json:"cachingMode,omitempty" yaml:"cachingMode,omitempty"`

	// DiskName is the Name of the data disk in the blob storage
	DiskName string `json:"diskName" yaml:"diskName"`

	// DiskURI is the URI of data disk in the blob storage
	DiskURI string `json:"diskURI" yaml:"diskURI"`

	// FsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty" yaml:"fsType,omitempty"`

	// Kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty"`

	// ReadOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`
}

func NewAzureDiskVolumeSource() *AzureDiskVolumeSource {
	return &AzureDiskVolumeSource{}
}

func NewAzureDiskVolumeSourceWithSpec(spec *AzureDiskVolumeSource) *AzureDiskVolumeSource {
	
	return spec
}

func RegisterAzureDiskVolumeSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[AzureDiskVolumeSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("CachingMode"),
		js.Field("DiskName"),
		js.Field("DiskURI"),
		js.Field("FsType"),
		js.Field("Kind"),
		js.Field("ReadOnly"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewAzureDiskVolumeSource)),
		js.Constructor(reflect.ValueOf(NewAzureDiskVolumeSourceWithSpec)),
	)
}