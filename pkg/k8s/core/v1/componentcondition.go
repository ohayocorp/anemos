// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// Information about the condition of a component.
type ComponentCondition struct {
	// Condition error code for a component. For example, a health check error code.
	Error *string `json:"error,omitempty" yaml:"error,omitempty"`

	// Message about the condition for a component. For example, information about a health check.
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// Type of condition for a component. Valid value: "Healthy"
	Type string `json:"type" yaml:"type"`
}

func NewComponentCondition() *ComponentCondition {
	return &ComponentCondition{}
}

func NewComponentConditionWithSpec(spec *ComponentCondition) *ComponentCondition {
	
	return spec
}

func RegisterComponentCondition(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ComponentCondition]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Error"),
		js.Field("Message"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewComponentCondition)),
		js.Constructor(reflect.ValueOf(NewComponentConditionWithSpec)),
	)
}