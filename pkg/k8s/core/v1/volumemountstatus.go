// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// VolumeMountStatus shows status of volume mounts.
type VolumeMountStatus struct {
	// MountPath corresponds to the original VolumeMount.
	MountPath string `json:"mountPath" yaml:"mountPath"`

	// Name corresponds to the name of the original VolumeMount.
	Name string `json:"name" yaml:"name"`

	// ReadOnly corresponds to the original VolumeMount.
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`

	// RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.
	RecursiveReadOnly *string `json:"recursiveReadOnly,omitempty" yaml:"recursiveReadOnly,omitempty"`
}

func NewVolumeMountStatus() *VolumeMountStatus {
	return &VolumeMountStatus{}
}

func NewVolumeMountStatusWithSpec(spec *VolumeMountStatus) *VolumeMountStatus {
	
	return spec
}

func RegisterVolumeMountStatus(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[VolumeMountStatus]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("MountPath"),
		js.Field("Name"),
		js.Field("ReadOnly"),
		js.Field("RecursiveReadOnly"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewVolumeMountStatus)),
		js.Constructor(reflect.ValueOf(NewVolumeMountStatusWithSpec)),
	)
}