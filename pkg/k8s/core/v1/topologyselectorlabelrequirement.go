// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type TopologySelectorLabelRequirement struct {
	// The label key that the selector applies to.
	Key string `json:"key" yaml:"key"`

	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values []string `json:"values" yaml:"values"`
}

func NewTopologySelectorLabelRequirement() *TopologySelectorLabelRequirement {
	return &TopologySelectorLabelRequirement{}
}

func NewTopologySelectorLabelRequirementWithSpec(spec *TopologySelectorLabelRequirement) *TopologySelectorLabelRequirement {
	
	return spec
}

func RegisterTopologySelectorLabelRequirement(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[TopologySelectorLabelRequirement]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Key"),
		js.Field("Values"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewTopologySelectorLabelRequirement)),
		js.Constructor(reflect.ValueOf(NewTopologySelectorLabelRequirementWithSpec)),
	)
}