// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
type ConfigMapNodeConfigSource struct {
	// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
	KubeletConfigKey string `json:"kubeletConfigKey" yaml:"kubeletConfigKey"`

	// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
	Name string `json:"name" yaml:"name"`

	// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
	Namespace string `json:"namespace" yaml:"namespace"`

	// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	ResourceVersion *string `json:"resourceVersion,omitempty" yaml:"resourceVersion,omitempty"`

	// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	Uid *string `json:"uid,omitempty" yaml:"uid,omitempty"`
}

func NewConfigMapNodeConfigSource() *ConfigMapNodeConfigSource {
	return &ConfigMapNodeConfigSource{}
}

func NewConfigMapNodeConfigSourceWithSpec(spec *ConfigMapNodeConfigSource) *ConfigMapNodeConfigSource {
	
	return spec
}

func RegisterConfigMapNodeConfigSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ConfigMapNodeConfigSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("KubeletConfigKey"),
		js.Field("Name"),
		js.Field("Namespace"),
		js.Field("ResourceVersion"),
		js.Field("Uid"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewConfigMapNodeConfigSource)),
		js.Constructor(reflect.ValueOf(NewConfigMapNodeConfigSourceWithSpec)),
	)
}