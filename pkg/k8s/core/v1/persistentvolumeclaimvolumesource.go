// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type PersistentVolumeClaimVolumeSource struct {
	// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName string `json:"claimName" yaml:"claimName"`

	// ReadOnly Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`
}

func NewPersistentVolumeClaimVolumeSource() *PersistentVolumeClaimVolumeSource {
	return &PersistentVolumeClaimVolumeSource{}
}

func NewPersistentVolumeClaimVolumeSourceWithSpec(spec *PersistentVolumeClaimVolumeSource) *PersistentVolumeClaimVolumeSource {
	
	return spec
}

func RegisterPersistentVolumeClaimVolumeSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[PersistentVolumeClaimVolumeSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("ClaimName"),
		js.Field("ReadOnly"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewPersistentVolumeClaimVolumeSource)),
		js.Constructor(reflect.ValueOf(NewPersistentVolumeClaimVolumeSourceWithSpec)),
	)
}