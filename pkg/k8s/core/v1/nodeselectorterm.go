// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type NodeSelectorTerm struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []*NodeSelectorRequirement `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty"`

	// A list of node selector requirements by node's fields.
	MatchFields []*NodeSelectorRequirement `json:"matchFields,omitempty" yaml:"matchFields,omitempty"`
}

func NewNodeSelectorTerm() *NodeSelectorTerm {
	return &NodeSelectorTerm{}
}

func NewNodeSelectorTermWithSpec(spec *NodeSelectorTerm) *NodeSelectorTerm {
	
	return spec
}

func RegisterNodeSelectorTerm(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[NodeSelectorTerm]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("MatchExpressions"),
		js.Field("MatchFields"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewNodeSelectorTerm)),
		js.Constructor(reflect.ValueOf(NewNodeSelectorTermWithSpec)),
	)
}