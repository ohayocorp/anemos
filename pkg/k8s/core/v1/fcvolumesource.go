// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
type FCVolumeSource struct {
	// FsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty" yaml:"fsType,omitempty"`

	// Lun is Optional: FC target lun number
	Lun *int `json:"lun,omitempty" yaml:"lun,omitempty"`

	// ReadOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`

	// TargetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs *[]string `json:"targetWWNs,omitempty" yaml:"targetWWNs,omitempty"`

	// Wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids *[]string `json:"wwids,omitempty" yaml:"wwids,omitempty"`
}

func NewFCVolumeSource() *FCVolumeSource {
	return &FCVolumeSource{}
}

func NewFCVolumeSourceWithSpec(spec *FCVolumeSource) *FCVolumeSource {
	
	return spec
}

func RegisterFCVolumeSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[FCVolumeSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("FsType"),
		js.Field("Lun"),
		js.Field("ReadOnly"),
		js.Field("TargetWWNs"),
		js.Field("Wwids"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewFCVolumeSource)),
		js.Constructor(reflect.ValueOf(NewFCVolumeSourceWithSpec)),
	)
}