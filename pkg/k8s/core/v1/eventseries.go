// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
type EventSeries struct {
	// Number of occurrences in this series up to the last heartbeat time
	Count *int `json:"count,omitempty" yaml:"count,omitempty"`

	// Time of the last occurrence observed
	LastObservedTime *string `json:"lastObservedTime,omitempty" yaml:"lastObservedTime,omitempty"`
}

func NewEventSeries() *EventSeries {
	return &EventSeries{}
}

func NewEventSeriesWithSpec(spec *EventSeries) *EventSeries {
	
	return spec
}

func RegisterEventSeries(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[EventSeries]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Count"),
		js.Field("LastObservedTime"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewEventSeries)),
		js.Constructor(reflect.ValueOf(NewEventSeriesWithSpec)),
	)
}