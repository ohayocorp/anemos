// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// PersistentVolumeClaimCondition contains details about state of pvc
type PersistentVolumeClaimCondition struct {
	// LastProbeTime is the time we probed the condition.
	LastProbeTime *string `json:"lastProbeTime,omitempty" yaml:"lastProbeTime,omitempty"`

	// LastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" yaml:"lastTransitionTime,omitempty"`

	// Message is the human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// Reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "Resizing" that means the underlying persistent volume is being resized.
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty"`

	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
	Status string `json:"status" yaml:"status"`

	// Type is the type of the condition. More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
	Type string `json:"type" yaml:"type"`
}

func NewPersistentVolumeClaimCondition() *PersistentVolumeClaimCondition {
	return &PersistentVolumeClaimCondition{}
}

func NewPersistentVolumeClaimConditionWithSpec(spec *PersistentVolumeClaimCondition) *PersistentVolumeClaimCondition {
	
	return spec
}

func RegisterPersistentVolumeClaimCondition(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[PersistentVolumeClaimCondition]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("LastProbeTime"),
		js.Field("LastTransitionTime"),
		js.Field("Message"),
		js.Field("Reason"),
		js.Field("Status"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewPersistentVolumeClaimCondition)),
		js.Constructor(reflect.ValueOf(NewPersistentVolumeClaimConditionWithSpec)),
	)
}