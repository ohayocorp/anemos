// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSource struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *ConfigMapKeySelector `json:"configMapKeyRef,omitempty" yaml:"configMapKeyRef,omitempty"`

	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *ObjectFieldSelector `json:"fieldRef,omitempty" yaml:"fieldRef,omitempty"`

	// FileKeyRef selects a key of the env file. Requires the EnvFiles feature gate to be enabled.
	FileKeyRef *FileKeySelector `json:"fileKeyRef,omitempty" yaml:"fileKeyRef,omitempty"`

	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *ResourceFieldSelector `json:"resourceFieldRef,omitempty" yaml:"resourceFieldRef,omitempty"`

	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *SecretKeySelector `json:"secretKeyRef,omitempty" yaml:"secretKeyRef,omitempty"`
}

func NewEnvVarSource() *EnvVarSource {
	return &EnvVarSource{}
}

func NewEnvVarSourceWithSpec(spec *EnvVarSource) *EnvVarSource {
	
	return spec
}

func RegisterEnvVarSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[EnvVarSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("ConfigMapKeyRef"),
		js.Field("FieldRef"),
		js.Field("FileKeyRef"),
		js.Field("ResourceFieldRef"),
		js.Field("SecretKeyRef"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewEnvVarSource)),
		js.Constructor(reflect.ValueOf(NewEnvVarSourceWithSpec)),
	)
}