// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFilePersistentVolumeSource struct {
	// ReadOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`

	// SecretName is the name of secret that contains Azure Storage Account Name and Key
	SecretName string `json:"secretName" yaml:"secretName"`

	// SecretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
	SecretNamespace *string `json:"secretNamespace,omitempty" yaml:"secretNamespace,omitempty"`

	// ShareName is the azure Share Name
	ShareName string `json:"shareName" yaml:"shareName"`
}

func NewAzureFilePersistentVolumeSource() *AzureFilePersistentVolumeSource {
	return &AzureFilePersistentVolumeSource{}
}

func NewAzureFilePersistentVolumeSourceWithSpec(spec *AzureFilePersistentVolumeSource) *AzureFilePersistentVolumeSource {
	
	return spec
}

func RegisterAzureFilePersistentVolumeSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[AzureFilePersistentVolumeSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("ReadOnly"),
		js.Field("SecretName"),
		js.Field("SecretNamespace"),
		js.Field("ShareName"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewAzureFilePersistentVolumeSource)),
		js.Constructor(reflect.ValueOf(NewAzureFilePersistentVolumeSourceWithSpec)),
	)
}