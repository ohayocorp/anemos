// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// PortworxVolumeSource represents a Portworx volume resource.
type PortworxVolumeSource struct {
	// FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty" yaml:"fsType,omitempty"`

	// ReadOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`

	// VolumeID uniquely identifies a Portworx volume
	VolumeID string `json:"volumeID" yaml:"volumeID"`
}

func NewPortworxVolumeSource() *PortworxVolumeSource {
	return &PortworxVolumeSource{}
}

func NewPortworxVolumeSourceWithSpec(spec *PortworxVolumeSource) *PortworxVolumeSource {
	
	return spec
}

func RegisterPortworxVolumeSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[PortworxVolumeSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("FsType"),
		js.Field("ReadOnly"),
		js.Field("VolumeID"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewPortworxVolumeSource)),
		js.Constructor(reflect.ValueOf(NewPortworxVolumeSourceWithSpec)),
	)
}