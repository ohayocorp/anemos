// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type NodeSelector struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []*NodeSelectorTerm `json:"nodeSelectorTerms" yaml:"nodeSelectorTerms"`
}

func NewNodeSelector() *NodeSelector {
	return &NodeSelector{}
}

func NewNodeSelectorWithSpec(spec *NodeSelector) *NodeSelector {
	
	return spec
}

func RegisterNodeSelector(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[NodeSelector]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("NodeSelectorTerms"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewNodeSelector)),
		js.Constructor(reflect.ValueOf(NewNodeSelectorWithSpec)),
	)
}