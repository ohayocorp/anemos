// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// NodeCondition contains condition information for a node.
type NodeCondition struct {
	// Last time we got an update on a given condition.
	LastHeartbeatTime *string `json:"lastHeartbeatTime,omitempty" yaml:"lastHeartbeatTime,omitempty"`

	// Last time the condition transit from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" yaml:"lastTransitionTime,omitempty"`

	// Human readable message indicating details about last transition.
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// (brief) reason for the condition's last transition.
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty"`

	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status" yaml:"status"`

	// Type of node condition.
	Type string `json:"type" yaml:"type"`
}

func NewNodeCondition() *NodeCondition {
	return &NodeCondition{}
}

func NewNodeConditionWithSpec(spec *NodeCondition) *NodeCondition {
	
	return spec
}

func RegisterNodeCondition(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[NodeCondition]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("LastHeartbeatTime"),
		js.Field("LastTransitionTime"),
		js.Field("Message"),
		js.Field("Reason"),
		js.Field("Status"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewNodeCondition)),
		js.Constructor(reflect.ValueOf(NewNodeConditionWithSpec)),
	)
}