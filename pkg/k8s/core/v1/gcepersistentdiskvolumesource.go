// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// Represents a Persistent Disk resource in Google Compute Engine.
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
type GCEPersistentDiskVolumeSource struct {
	// FsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType *string `json:"fsType,omitempty" yaml:"fsType,omitempty"`

	// Partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int `json:"partition,omitempty" yaml:"partition,omitempty"`

	// PdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName string `json:"pdName" yaml:"pdName"`

	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`
}

func NewGCEPersistentDiskVolumeSource() *GCEPersistentDiskVolumeSource {
	return &GCEPersistentDiskVolumeSource{}
}

func NewGCEPersistentDiskVolumeSourceWithSpec(spec *GCEPersistentDiskVolumeSource) *GCEPersistentDiskVolumeSource {
	
	return spec
}

func RegisterGCEPersistentDiskVolumeSource(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[GCEPersistentDiskVolumeSource]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("FsType"),
		js.Field("Partition"),
		js.Field("PdName"),
		js.Field("ReadOnly"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewGCEPersistentDiskVolumeSource)),
		js.Constructor(reflect.ValueOf(NewGCEPersistentDiskVolumeSourceWithSpec)),
	)
}