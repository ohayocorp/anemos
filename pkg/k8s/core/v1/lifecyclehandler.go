// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
type LifecycleHandler struct {
	// Exec specifies a command to execute in the container.
	Exec *ExecAction `json:"exec,omitempty" yaml:"exec,omitempty"`

	// HTTPGet specifies an HTTP GET request to perform.
	HttpGet *HTTPGetAction `json:"httpGet,omitempty" yaml:"httpGet,omitempty"`

	// Sleep represents a duration that the container should sleep.
	Sleep *SleepAction `json:"sleep,omitempty" yaml:"sleep,omitempty"`

	// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility. There is no validation of this field and lifecycle hooks will fail at runtime when it is specified.
	TcpSocket *TCPSocketAction `json:"tcpSocket,omitempty" yaml:"tcpSocket,omitempty"`
}

func NewLifecycleHandler() *LifecycleHandler {
	return &LifecycleHandler{}
}

func NewLifecycleHandlerWithSpec(spec *LifecycleHandler) *LifecycleHandler {
	
	return spec
}

func RegisterLifecycleHandler(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[LifecycleHandler]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Exec"),
		js.Field("HttpGet"),
		js.Field("Sleep"),
		js.Field("TcpSocket"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewLifecycleHandler)),
		js.Constructor(reflect.ValueOf(NewLifecycleHandlerWithSpec)),
	)
}