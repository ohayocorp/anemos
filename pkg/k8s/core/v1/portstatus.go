// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// PortStatus represents the error condition of a service port
type PortStatus struct {
	// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
	//   CamelCase names
	// - cloud provider specific error values must have names that comply with the
	//   format foo.example.com/CamelCase.
	Error *string `json:"error,omitempty" yaml:"error,omitempty"`

	// Port is the port number of the service port of which status is recorded here
	Port int `json:"port" yaml:"port"`

	// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
	Protocol string `json:"protocol" yaml:"protocol"`
}

func NewPortStatus() *PortStatus {
	return &PortStatus{}
}

func NewPortStatusWithSpec(spec *PortStatus) *PortStatus {
	
	return spec
}

func RegisterPortStatus(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[PortStatus]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Error"),
		js.Field("Port"),
		js.Field("Protocol"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewPortStatus)),
		js.Constructor(reflect.ValueOf(NewPortStatusWithSpec)),
	)
}