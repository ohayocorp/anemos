// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
type ResourceQuotaSpec struct {
	// Hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard map[string]any `json:"hard,omitempty" yaml:"hard,omitempty"`

	// ScopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
	ScopeSelector *ScopeSelector `json:"scopeSelector,omitempty" yaml:"scopeSelector,omitempty"`

	// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
	Scopes *[]string `json:"scopes,omitempty" yaml:"scopes,omitempty"`
}

func NewResourceQuotaSpec() *ResourceQuotaSpec {
	return &ResourceQuotaSpec{}
}

func NewResourceQuotaSpecWithSpec(spec *ResourceQuotaSpec) *ResourceQuotaSpec {
	
	return spec
}

func RegisterResourceQuotaSpec(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ResourceQuotaSpec]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Hard"),
		js.Field("ScopeSelector"),
		js.Field("Scopes"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewResourceQuotaSpec)),
		js.Constructor(reflect.ValueOf(NewResourceQuotaSpecWithSpec)),
	)
}