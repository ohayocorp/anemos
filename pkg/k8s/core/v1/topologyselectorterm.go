// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type TopologySelectorTerm struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []*TopologySelectorLabelRequirement `json:"matchLabelExpressions,omitempty" yaml:"matchLabelExpressions,omitempty"`
}

func NewTopologySelectorTerm() *TopologySelectorTerm {
	return &TopologySelectorTerm{}
}

func NewTopologySelectorTermWithSpec(spec *TopologySelectorTerm) *TopologySelectorTerm {
	
	return spec
}

func RegisterTopologySelectorTerm(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[TopologySelectorTerm]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("MatchLabelExpressions"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewTopologySelectorTerm)),
		js.Constructor(reflect.ValueOf(NewTopologySelectorTermWithSpec)),
	)
}