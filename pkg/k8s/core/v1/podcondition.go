// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// PodCondition contains details for the current condition of this pod.
type PodCondition struct {
	// Last time we probed the condition.
	LastProbeTime *string `json:"lastProbeTime,omitempty" yaml:"lastProbeTime,omitempty"`

	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" yaml:"lastTransitionTime,omitempty"`

	// Human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// If set, this represents the .metadata.generation that the pod condition was set based upon. This is an alpha field. Enable PodObservedGenerationTracking to be able to use this field.
	ObservedGeneration *int `json:"observedGeneration,omitempty" yaml:"observedGeneration,omitempty"`

	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty"`

	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Status string `json:"status" yaml:"status"`

	// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Type string `json:"type" yaml:"type"`
}

func NewPodCondition() *PodCondition {
	return &PodCondition{}
}

func NewPodConditionWithSpec(spec *PodCondition) *PodCondition {
	
	return spec
}

func RegisterPodCondition(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[PodCondition]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("LastProbeTime"),
		js.Field("LastTransitionTime"),
		js.Field("Message"),
		js.Field("ObservedGeneration"),
		js.Field("Reason"),
		js.Field("Status"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewPodCondition)),
		js.Constructor(reflect.ValueOf(NewPodConditionWithSpec)),
	)
}