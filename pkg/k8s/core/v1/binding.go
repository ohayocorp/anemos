// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	apimachinerymetav1 "github.com/ohayocorp/anemos/pkg/k8s/apimachinery/meta/v1"
)

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler.
type Binding struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty"`

	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *apimachinerymetav1.ObjectMeta `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// The target object that you want to bind to the standard object.
	Target *ObjectReference `json:"target" yaml:"target"`
}

func NewBinding() *Binding {
	return &Binding{}
}

func NewBindingWithSpec(spec *Binding) *Binding {
	version := "v1"
	kind := "Binding"
	
	spec.ApiVersion = &version
	spec.Kind = &kind
	return spec
}

func RegisterBinding(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[Binding]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("ApiVersion"),
		js.Field("Kind"),
		js.Field("Metadata"),
		js.Field("Target"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewBinding)),
		js.Constructor(reflect.ValueOf(NewBindingWithSpec)),
	)
}