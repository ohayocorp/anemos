// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
type NodeSystemInfo struct {
	// The Architecture reported by the node
	Architecture string `json:"architecture" yaml:"architecture"`

	// Boot ID reported by the node.
	BootID string `json:"bootID" yaml:"bootID"`

	// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
	ContainerRuntimeVersion string `json:"containerRuntimeVersion" yaml:"containerRuntimeVersion"`

	// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion string `json:"kernelVersion" yaml:"kernelVersion"`

	// Deprecated: KubeProxy Version reported by the node.
	KubeProxyVersion string `json:"kubeProxyVersion" yaml:"kubeProxyVersion"`

	// Kubelet Version reported by the node.
	KubeletVersion string `json:"kubeletVersion" yaml:"kubeletVersion"`

	// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
	MachineID string `json:"machineID" yaml:"machineID"`

	// The Operating System reported by the node
	OperatingSystem string `json:"operatingSystem" yaml:"operatingSystem"`

	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
	OsImage string `json:"osImage" yaml:"osImage"`

	// Swap Info reported by the node.
	Swap *NodeSwapStatus `json:"swap,omitempty" yaml:"swap,omitempty"`

	// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
	SystemUUID string `json:"systemUUID" yaml:"systemUUID"`
}

func NewNodeSystemInfo() *NodeSystemInfo {
	return &NodeSystemInfo{}
}

func NewNodeSystemInfoWithSpec(spec *NodeSystemInfo) *NodeSystemInfo {
	
	return spec
}

func RegisterNodeSystemInfo(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[NodeSystemInfo]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Architecture"),
		js.Field("BootID"),
		js.Field("ContainerRuntimeVersion"),
		js.Field("KernelVersion"),
		js.Field("KubeProxyVersion"),
		js.Field("KubeletVersion"),
		js.Field("MachineID"),
		js.Field("OperatingSystem"),
		js.Field("OsImage"),
		js.Field("Swap"),
		js.Field("SystemUUID"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewNodeSystemInfo)),
		js.Constructor(reflect.ValueOf(NewNodeSystemInfoWithSpec)),
	)
}