// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// NodeStatus is information about the current status of a node.
type NodeStatus struct {
	// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/reference/node/node-status/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
	Addresses []*NodeAddress `json:"addresses,omitempty" yaml:"addresses,omitempty"`

	// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
	Allocatable map[string]any `json:"allocatable,omitempty" yaml:"allocatable,omitempty"`

	// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/reference/node/node-status/#capacity
	Capacity map[string]any `json:"capacity,omitempty" yaml:"capacity,omitempty"`

	// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/reference/node/node-status/#condition
	Conditions []*NodeCondition `json:"conditions,omitempty" yaml:"conditions,omitempty"`

	// Status of the config assigned to the node via the dynamic Kubelet config feature.
	Config *NodeConfigStatus `json:"config,omitempty" yaml:"config,omitempty"`

	// Endpoints of daemons running on the Node.
	DaemonEndpoints *NodeDaemonEndpoints `json:"daemonEndpoints,omitempty" yaml:"daemonEndpoints,omitempty"`

	// Features describes the set of features implemented by the CRI implementation.
	Features *NodeFeatures `json:"features,omitempty" yaml:"features,omitempty"`

	// List of container images on this node
	Images []*ContainerImage `json:"images,omitempty" yaml:"images,omitempty"`

	// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/reference/node/node-status/#info
	NodeInfo *NodeSystemInfo `json:"nodeInfo,omitempty" yaml:"nodeInfo,omitempty"`

	// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
	Phase *string `json:"phase,omitempty" yaml:"phase,omitempty"`

	// The available runtime handlers.
	RuntimeHandlers []*NodeRuntimeHandler `json:"runtimeHandlers,omitempty" yaml:"runtimeHandlers,omitempty"`

	// List of volumes that are attached to the node.
	VolumesAttached []*AttachedVolume `json:"volumesAttached,omitempty" yaml:"volumesAttached,omitempty"`

	// List of attachable volumes in use (mounted) by the node.
	VolumesInUse *[]string `json:"volumesInUse,omitempty" yaml:"volumesInUse,omitempty"`
}

func NewNodeStatus() *NodeStatus {
	return &NodeStatus{}
}

func NewNodeStatusWithSpec(spec *NodeStatus) *NodeStatus {
	
	return spec
}

func RegisterNodeStatus(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[NodeStatus]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Addresses"),
		js.Field("Allocatable"),
		js.Field("Capacity"),
		js.Field("Conditions"),
		js.Field("Config"),
		js.Field("DaemonEndpoints"),
		js.Field("Features"),
		js.Field("Images"),
		js.Field("NodeInfo"),
		js.Field("Phase"),
		js.Field("RuntimeHandlers"),
		js.Field("VolumesAttached"),
		js.Field("VolumesInUse"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewNodeStatus)),
		js.Constructor(reflect.ValueOf(NewNodeStatusWithSpec)),
	)
}