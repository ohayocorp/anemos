// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
type LimitRangeItem struct {
	// Default resource requirement limit value by resource name if resource limit is omitted.
	Default map[string]any `json:"default,omitempty" yaml:"default,omitempty"`

	// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
	DefaultRequest map[string]any `json:"defaultRequest,omitempty" yaml:"defaultRequest,omitempty"`

	// Max usage constraints on this kind by resource name.
	Max map[string]any `json:"max,omitempty" yaml:"max,omitempty"`

	// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
	MaxLimitRequestRatio map[string]any `json:"maxLimitRequestRatio,omitempty" yaml:"maxLimitRequestRatio,omitempty"`

	// Min usage constraints on this kind by resource name.
	Min map[string]any `json:"min,omitempty" yaml:"min,omitempty"`

	// Type of resource that this limit applies to.
	Type string `json:"type" yaml:"type"`
}

func NewLimitRangeItem() *LimitRangeItem {
	return &LimitRangeItem{}
}

func NewLimitRangeItemWithSpec(spec *LimitRangeItem) *LimitRangeItem {
	
	return spec
}

func RegisterLimitRangeItem(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[LimitRangeItem]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("Default"),
		js.Field("DefaultRequest"),
		js.Field("Max"),
		js.Field("MaxLimitRequestRatio"),
		js.Field("Min"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewLimitRangeItem)),
		js.Constructor(reflect.ValueOf(NewLimitRangeItemWithSpec)),
	)
}