// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// ReplicationControllerStatus represents the current status of a replication controller.
type ReplicationControllerStatus struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
	AvailableReplicas *int `json:"availableReplicas,omitempty" yaml:"availableReplicas,omitempty"`

	// Represents the latest available observations of a replication controller's current state.
	Conditions []*ReplicationControllerCondition `json:"conditions,omitempty" yaml:"conditions,omitempty"`

	// The number of pods that have labels matching the labels of the pod template of the replication controller.
	FullyLabeledReplicas *int `json:"fullyLabeledReplicas,omitempty" yaml:"fullyLabeledReplicas,omitempty"`

	// ObservedGeneration reflects the generation of the most recently observed replication controller.
	ObservedGeneration *int `json:"observedGeneration,omitempty" yaml:"observedGeneration,omitempty"`

	// The number of ready replicas for this replication controller.
	ReadyReplicas *int `json:"readyReplicas,omitempty" yaml:"readyReplicas,omitempty"`

	// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas int `json:"replicas" yaml:"replicas"`
}

func NewReplicationControllerStatus() *ReplicationControllerStatus {
	return &ReplicationControllerStatus{}
}

func NewReplicationControllerStatusWithSpec(spec *ReplicationControllerStatus) *ReplicationControllerStatus {
	
	return spec
}

func RegisterReplicationControllerStatus(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ReplicationControllerStatus]()).JsNamespace("k8s.core.v1").Fields(
		js.Field("AvailableReplicas"),
		js.Field("Conditions"),
		js.Field("FullyLabeledReplicas"),
		js.Field("ObservedGeneration"),
		js.Field("ReadyReplicas"),
		js.Field("Replicas"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewReplicationControllerStatus)),
		js.Constructor(reflect.ValueOf(NewReplicationControllerStatusWithSpec)),
	)
}