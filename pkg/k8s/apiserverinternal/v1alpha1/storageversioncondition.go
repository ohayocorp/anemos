// Code generated by types_generator.go; DO NOT EDIT.

package v1alpha1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// Describes the state of the storageVersion at a certain point.
type StorageVersionCondition struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" yaml:"lastTransitionTime,omitempty"`

	// A human readable message indicating details about the transition.
	Message string `json:"message" yaml:"message"`

	// If set, this represents the .metadata.generation that the condition was set based upon.
	ObservedGeneration *int `json:"observedGeneration,omitempty" yaml:"observedGeneration,omitempty"`

	// The reason for the condition's last transition.
	Reason string `json:"reason" yaml:"reason"`

	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status" yaml:"status"`

	// Type of the condition.
	Type string `json:"type" yaml:"type"`
}

func NewStorageVersionCondition() *StorageVersionCondition {
	return &StorageVersionCondition{}
}

func NewStorageVersionConditionWithSpec(spec *StorageVersionCondition) *StorageVersionCondition {
	
	return spec
}

func RegisterStorageVersionCondition(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[StorageVersionCondition]()).JsNamespace("k8s.apiserverinternal.v1alpha1").Fields(
		js.Field("LastTransitionTime"),
		js.Field("Message"),
		js.Field("ObservedGeneration"),
		js.Field("Reason"),
		js.Field("Status"),
		js.Field("Type"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewStorageVersionCondition)),
		js.Constructor(reflect.ValueOf(NewStorageVersionConditionWithSpec)),
	)
}