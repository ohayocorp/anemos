// Code generated by types_generator.go; DO NOT EDIT.

package v1alpha1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.
type ServerStorageVersion struct {
	// The ID of the reporting API server.
	ApiServerID *string `json:"apiServerID,omitempty" yaml:"apiServerID,omitempty"`

	// The API server can decode objects encoded in these versions. The encodingVersion must be included in the decodableVersions.
	DecodableVersions *[]string `json:"decodableVersions,omitempty" yaml:"decodableVersions,omitempty"`

	// The API server encodes the object to this version when persisting it in the backend (e.g., etcd).
	EncodingVersion *string `json:"encodingVersion,omitempty" yaml:"encodingVersion,omitempty"`

	// The API server can serve these versions. DecodableVersions must include all ServedVersions.
	ServedVersions *[]string `json:"servedVersions,omitempty" yaml:"servedVersions,omitempty"`
}

func NewServerStorageVersion() *ServerStorageVersion {
	return &ServerStorageVersion{}
}

func NewServerStorageVersionWithSpec(spec *ServerStorageVersion) *ServerStorageVersion {
	
	return spec
}

func RegisterServerStorageVersion(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[ServerStorageVersion]()).JsNamespace("k8s.apiserverinternal.v1alpha1").Fields(
		js.Field("ApiServerID"),
		js.Field("DecodableVersions"),
		js.Field("EncodingVersion"),
		js.Field("ServedVersions"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewServerStorageVersion)),
		js.Constructor(reflect.ValueOf(NewServerStorageVersionWithSpec)),
	)
}