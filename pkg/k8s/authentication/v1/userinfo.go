// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	
)

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfo struct {
	// Any additional information provided by the authenticator.
	Extra *any `json:"extra,omitempty" yaml:"extra,omitempty"`

	// The names of groups this user is a part of.
	Groups *[]string `json:"groups,omitempty" yaml:"groups,omitempty"`

	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	Uid *string `json:"uid,omitempty" yaml:"uid,omitempty"`

	// The name that uniquely identifies this user among all active users.
	Username *string `json:"username,omitempty" yaml:"username,omitempty"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func NewUserInfoWithSpec(spec *UserInfo) *UserInfo {
	
	return spec
}

func RegisterUserInfo(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[UserInfo]()).JsNamespace("k8s.authentication.v1").Fields(
		js.Field("Extra"),
		js.Field("Groups"),
		js.Field("Uid"),
		js.Field("Username"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewUserInfo)),
		js.Constructor(reflect.ValueOf(NewUserInfoWithSpec)),
	)
}