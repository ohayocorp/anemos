// Code generated by types_generator.go; DO NOT EDIT.

package v1

import (
	"reflect"

	"github.com/ohayocorp/anemos/pkg/js"

	corev1 "github.com/ohayocorp/anemos/pkg/k8s/core/v1"
)

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
type Scheduling struct {
	// NodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
	NodeSelector *any `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty"`

	// Tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
	Tolerations []*corev1.Toleration `json:"tolerations,omitempty" yaml:"tolerations,omitempty"`
}

func NewScheduling() *Scheduling {
	return &Scheduling{}
}

func NewSchedulingWithSpec(spec *Scheduling) *Scheduling {
	
	return spec
}

func RegisterScheduling(jsRuntime *js.JsRuntime) {
	jsRuntime.Type(reflect.TypeFor[Scheduling]()).JsNamespace("k8s.node.v1").Fields(
		js.Field("NodeSelector"),
		js.Field("Tolerations"),
	).Constructors(
		js.Constructor(reflect.ValueOf(NewScheduling)),
		js.Constructor(reflect.ValueOf(NewSchedulingWithSpec)),
	)
}